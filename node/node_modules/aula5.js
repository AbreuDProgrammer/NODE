/*
Modulos do proprio nucle do Node:
Http - Usado para relacionar um servidor HTTP e o cliente, é necessário importar a bib. 'http'
Suporta muitos recursos do protocolo http.
*/
var http = require('http'); // Interface de nucleo que controla o prot http
const { isFunction } = require('util');
// createServer() - criar um servidor que responde às requisições http
// http.listen(x) - inicia um listener no servidor para a porta x
//http.createServer().listen(2412); // localhost:2412
/* Nada acontece */
// req(request) - aquilo que é recebido pelo servidor
// res(response) - o retoro do servidor
// response -> Método write - escreve no corpo da resposta do servidor ao pedido
// end() - sinaliza que o servidor respondeu e terminou [deve ser invocado em cada resposta]
/*http.createServer(function(req, res){
    res.write(
        require('./ex.js')
    );
    res.end();
}).listen(2412);*/
var pessoas = [
    {nome: "Leo", idade:16, profissao:"estudante", salario:100 },
    {nome: "Danilho", idade:17, profissao:"estudante", salario:100 },
    {nome: "Afonso", idade:17, profissao:"estudante", salario:100 },
    {nome: "Guilherme", idade:20, profissao:"estudante", salario:100 }
];
var cursos = [
    {nome: "Programador", salario:10000 },
    {nome: "Saúde", salario:2000 }
];
var erro = {erro: "Sem controlo para essa request.\n"};
// converte array num json
http.createServer(function(req, res){
    res.setHeader('Access-Control-Allow-Origin','*');
    console.log('REQ_URL -> '+req.url);
    if(req.url === '/pessoas')
        res.write(JSON.stringify(pessoas));
    else if(req.url === '/cursos')
        res.write(JSON.stringify(cursos));
    else
        res.write(JSON.stringify(erro));
    res.end();
}).listen(2412);
